// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  nodeEsModules = true
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  name             String
  password         String
  email            String    @unique
  mobileNo         String
  role             Role      @default(CREATOR)
  bio              String?   @db.Text
  profilePicture   String?
  token            String?
  facebookProfile  String?
  instagramProfile String?
  youtubeProfile   String?
  status           Status    @default(ACTIVE)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  Campaign            Campaign[]
  CampaignApplication CampaignApplication[]
  BankDetail          BankDetail[]
  Feedback            Feedback[]

}

enum Role {
  CREATOR
  BRAND
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCK
}

model CampaignCategories {
  id          Int        @id @default(autoincrement())
  name        String
  description String     @db.MediumText
  image       String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  campaign    Campaign[]
}

model Campaign {
  id                   Int                   @id @default(autoincrement())
  name                 String
  campaign             CampaignCategories    @relation(fields: [campaignCategoriesId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])
  shortDesc            String                @db.Text
  description          String                @db.MediumText
  image                String?               @db.Text
  video                String?               @db.Text
  startDate            DateTime
  endDate              DateTime
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?             @updatedAt
  campaignCategoriesId Int
  userId               Int
  CampaignPlatforms    CampaignPlatforms[]
  CampaignApplication  CampaignApplication[]
}

model CampaignPlatforms {
  id         Int       @id @default(autoincrement())
  plateform  Plateform
  campaign   Campaign  @relation(fields: [campaignId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  campaignId Int
}

enum Plateform {
  INSTAGRAME
  YOUTUBE
  FACEBOOK
}

model CampaignApplication {
  id                Int               @id @default(autoincrement())
  applicationStatus ApplicationStatus
  paymentStatus     PaymentStatus
  user              User              @relation(fields: [userId], references: [id])
  campaign          Campaign          @relation(fields: [campaignId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  campaignId        Int
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

model BankDetail {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  accountNo   String
  IFSCCode    String
  accountName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
}

// Feedback Model
model Feedback {
  id          Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [id])
  fullName    String   @db.VarChar(100)
  mobileNo    String   @db.VarChar(100)
  email       String   @db.VarChar(100)
  message     String   @db.Text
  contactDate DateTime @default(now())
  userId      Int?
}
